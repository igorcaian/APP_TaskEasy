import 'package:flutter/material.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';

import 'tela_gemini_model.dart';
export 'tela_gemini_model.dart';

class TelaGeminiWidget extends StatefulWidget {
  const TelaGeminiWidget({super.key});

  @override
  State<TelaGeminiWidget> createState() => _TelaGeminiWidgetState();
}

class _TelaGeminiWidgetState extends State<TelaGeminiWidget> {
  late TelaGeminiModel _model;

  final scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  void initState() {
    super.initState();
    _model = createModel(context, () => TelaGeminiModel());

    _model.txtPromptTextController ??= TextEditingController();
    _model.txtPromptFocusNode ??= FocusNode();

    WidgetsBinding.instance.addPostFrameCallback((_) => safeSetState(() {}));
  }

  @override
  void dispose() {
    _model.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => FocusScope.of(context).unfocus(),
      child: Scaffold(
        key: scaffoldKey,
        backgroundColor: Theme.of(context).backgroundColor,
        body: SafeArea(
          top: true,
          child: Column(
            mainAxisSize: MainAxisSize.max,
            children: [
              Column(
                mainAxisSize: MainAxisSize.max,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  if (MediaQuery.of(context).size.width > 600)
                    Text(
                      'Assistente Virtual\n',
                      style: Theme.of(context).textTheme.headline6?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                    ),
                  ClipRRect(
                    borderRadius: BorderRadius.circular(8),
                    child: Image.asset(
                      'assets/images/Google_Gemini_logo.svg.png',
                      width: 44,
                      height: 88,
                      fit: BoxFit.contain,
                      alignment: Alignment(0, 0),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsetsDirectional.fromSTEB(8, 32, 8, 8),
                    child: TextFormField(
                      controller: _model.txtPromptTextController,
                      focusNode: _model.txtPromptFocusNode,
                      autofocus: true,
                      obscureText: false,
                      decoration: InputDecoration(
                        labelText: 'Prompt',
                        labelStyle: Theme.of(context).textTheme.bodyText1,
                        hintText: 'Prompt...',
                        hintStyle: Theme.of(context).textTheme.bodyText1,
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: Theme.of(context).dividerColor,
                            width: 2,
                          ),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: Theme.of(context).primaryColor,
                            width: 2,
                          ),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        errorBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: Theme.of(context).errorColor,
                            width: 2,
                          ),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        focusedErrorBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: Theme.of(context).errorColor,
                            width: 2,
                          ),
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      style: Theme.of(context).textTheme.bodyText1,
                      validator: _model.txtPromptTextControllerValidator
                          .asValidator(context),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsetsDirectional.fromSTEB(8, 32, 8, 0),
                    child: ElevatedButton(
                      onPressed: () async {
                        await geminiGenerateText(
                          context,
                          _model.txtPromptTextController.text,
                        ).then((generatedText) {
                          safeSetState(() => _model.outText = generatedText);
                        });

                        _model.resposta = _model.outText;
                        safeSetState(() {});
                      },
                      child: Text('Gerar Resposta'),
                      style: ElevatedButton.styleFrom(
                        minimumSize: Size(200, 40),
                        padding: EdgeInsets.symmetric(horizontal: 24),
                        primary: Theme.of(context).primaryColor,
                        textStyle: Theme.of(context).textTheme.button?.copyWith(
                              color: Colors.white,
                            ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsetsDirectional.fromSTEB(0, 16, 0, 0),
                    child: Container(
                      width: double.infinity,
                      height: 499,
                      decoration: BoxDecoration(
                        color: Theme.of(context).scaffoldBackgroundColor,
                      ),
                      child: Opacity(
                        opacity: 0.6,
                        child: Padding(
                          padding: EdgeInsetsDirectional.fromSTEB(0, 16, 0, 0),
                          child: SingleChildScrollView(
                            child: Column(
                              mainAxisSize: MainAxisSize.min,
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                Flexible(
                                  child: MarkdownBody(
                                    data: _model.resposta ?? '--',
                                    selectable: true,
                                    onTapLink: (_, url, __) => launchURL(url!),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
